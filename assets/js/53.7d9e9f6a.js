(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{190:function(t,a,r){"use strict";r.r(a);var e=r(0),l=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"virtual-dom"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom"}},[t._v("#")]),t._v(" Virtual DOM")]),t._v(" "),r("p",[t._v("Virtual DOM 其实就是一棵以 JavaScript 对象( VNode 节点)作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。")]),t._v(" "),r("h2",{attrs:{id:"模板转换成视图的过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模板转换成视图的过程"}},[t._v("#")]),t._v(" 模板转换成视图的过程")]),t._v(" "),r("ul",[r("li",[t._v("Vue.js通过编译将template 模板转换成渲染函数(render ) ，执行渲染函数就可以得到一个虚拟节点树")]),t._v(" "),r("li",[t._v("在对 Model 进行操作的时候，会触发对应 Dep 中的 Watcher 对象。Watcher 对象会调用对应的 update 来修改视图。这个过程主要是将新旧虚拟节点进行差异对比，然后根据对比结果进行DOM操作来更新视图。")])]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/VirtualDOM.png",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"virtual-dom-作用是什么？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom-作用是什么？"}},[t._v("#")]),t._v(" Virtual DOM 作用是什么？")]),t._v(" "),r("p",[r("strong",[t._v("虚拟DOM的最终目标是将虚拟节点渲染到视图上。")])]),t._v(" "),r("p",[t._v("其实虚拟DOM在Vue.js主要做了两件事：")]),t._v(" "),r("ul",[r("li",[t._v("提供与真实DOM节点所对应的虚拟节点vnode")]),t._v(" "),r("li",[t._v("将虚拟节点vnode和旧虚拟节点oldVnode进行对比，然后更新视图")])])])}),[],!1,null,null,null);a.default=l.exports}}]);